package main

import (
	"context"
	//"fmt"
	"log"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"

	myErr "amiame/test-cockroachdb-errors/error"
	greetv1 "amiame/test-cockroachdb-errors/gen/greet/v1" // generated by protoc-gen-go and protoc-gen-go-grpc

	"github.com/cockroachdb/errors"
	"github.com/cockroachdb/errors/grpc/middleware"
	"github.com/cockroachdb/errors/markers"
)

func main() {
	conn, err := grpc.Dial("127.0.0.1:50052",
		grpc.WithTransportCredentials(insecure.NewCredentials()),
		grpc.WithUnaryInterceptor(middleware.UnaryClientInterceptor),
	)
	if err != nil {
		log.Fatalf("grpc dial: %+v\n", err)
	}
	defer func() {
		if err := conn.Close(); err != nil {
			log.Fatalf("conn close: %+v\n", err)
		}
	}()

	ctx := context.Background()
	client := greetv1.NewGreetServiceClient(conn)
	rsp, err := client.Greet(ctx, &greetv1.GreetRequest{Name: "amiame"})
	if err != nil {
		log.Printf("isErr1: %t %t\n", errors.Is(err, myErr.Error1), markers.Is(err, myErr.Error1))
		log.Printf("isErr2: %t %t\n", errors.Is(err, myErr.Error2), markers.Is(err, myErr.Error2))
		log.Printf("isErr3: %t %t\n", errors.Is(err, myErr.Error3), markers.Is(err, myErr.Error3))
		log.Printf("isAnyErr: %t\n", errors.IsAny(err, myErr.Error1, myErr.Error2, myErr.Error3))
		log.Fatalf("greet: %+v\n", err)
	}
	log.Printf("resp: %+v\n", rsp)
}
